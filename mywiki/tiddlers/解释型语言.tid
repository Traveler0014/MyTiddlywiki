created: 20210518091341495
creator: travonD
modified: 20240601115647979
modifier: travonD
tags: 编程语言
title: 解释型语言
tmap.id: 3bd0629f-5897-4309-8cbc-018491dd9095
type: text/vnd.tiddlywiki

[[编译]]是从高级程序代码到机器操作码的过程。

其中，机器操作码通常对应于实现具体功能的硬件电路，为保证泛用性，每一条硬件操作码都只包含非常简单的功能，如基本的整数加减法、浮点数加减法、读写内存/寄存器等。

而使用高级语言开发复杂软件时，实际上存在相当多重复需求。这些功能随复用需求提高，也会从代码片段逐渐发展成[[函数]]、包/[[模块]]，以至于被编程语言所吸收，提升成为编程语言默认支持的方法。

解释型语言实际上就是上述提高复用性过程中出现的产物，其出现的原始动机是开发者对程序''运行时灵活性''的追求。

人们通过编写一个叫做[[解释器]]的程序（可以理解为是一种软件模拟出来的计算机）。它接收高级语言代码，并在运行时对代码进行解释（词法分析、语法分析等），根据解释结果，调用预先编译好的高级指令以实现程序功能。

以这种方式实现的程序逻辑，通常在运行效率上存在明显瓶颈，但由于提供对动态类型等特性的支持而大大提高了编写时的效率。
